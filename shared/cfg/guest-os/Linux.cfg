- @Linux:
    os_type = linux
    shutdown_command = shutdown -h now
    reboot_command = shutdown -r now
    status_test_command = echo $?
    shell_linesep = \n
    username = root
    password = 123456
    shell_client = ssh
    shell_port = 22
    file_transfer_client = scp
    file_transfer_port = 22
    mem_chk_cmd = dmidecode -t 17 | awk -F: '/Size/ {print $2}'
    mem_chk_re_str = [^\$]([0-9]+)
    mem_chk_cur_cmd = grep MemTotal /proc/meminfo
    cpu_chk_cmd = grep -c processor /proc/cpuinfo
    # these config are used in utils_test.get_readable_cdroms()
    cdrom_get_cdrom_cmd = "ls /dev/cdrom*"
    cdrom_check_cdrom_pattern = "/dev/cdrom-\w+|/dev/cdrom\d*"
    cdrom_test_cmd = "dd if=%s of=/dev/null bs=1 count=1"
    cdrom_info_cmd = "cat /proc/sys/dev/cdrom/info"
    timedrift, timerdevice..boot_test:
        !ppc64, ppc64le:
            extra_params += " -no-kvm-pit-reinjection"
        time_command = date +'TIME: %a %m/%d/%Y %H:%M:%S.%N'
        time_filter_re = "(?:TIME: \w\w\w )(.{19})(?:\.\d\d)"
        time_format = "%m/%d/%Y %H:%M:%S"
        guest_load_command = "dd if=/dev/urandom of=/dev/null"
        guest_load_instances = 2
        guest_load_stop_command = "killall -9 dd"
        host_load_command = "bzip2 -c --best /dev/urandom > /dev/null"
        host_load_instances = 8
        get_hw_time_cmd = 'TZ=UTC date +"%s" -d "`hwclock`"'
        ntp:
            time_command = "ntpdate -d -q pool.ntp.org"
            time_filter_re = "originate timestamp:.*, (.\w+\s+\d+\s+\d+\s+\d+:\d+:\d+)\.(.\d+)"
            time_format = "%b %d %Y %H:%M:%S"
        date:
            time_command = date +'TIME: %a %m/%d/%Y %H:%M:%S.%N'
            time_filter_re = "(?:TIME: \w\w\w )(.{19})(?:\.\d\d)"
            time_format = "%m/%d/%Y %H:%M:%S"
    time_manage:
        time_command = date +'TIME: %a %m/%d/%Y %H:%M:%S.%N'
        time_filter_re = "(?:TIME: \w\w\w )(.{19})(?:\.\d\d)"
        time_format = "%m/%d/%Y %H:%M:%S"
    mac_change, device_assignment..pf_mac_change, macvtap_mac_change:
        change_cmd = ifconfig %s hw ether %s
    unattended_install, svirt_install:
        # Change the config below to yes if you want to use syslog
        # to get anaconda logs (leads to verbose install logs)
        syslog_server_enabled = no
        unattended_file_kernel_param_name = ks
    suspend:
        check_s3_support_cmd = grep -q mem /sys/power/state
        set_s3_cmd = echo mem > /sys/power/state
    guest_s3, check_suspend, balloon_fix_value:
        s3_support_chk_cmd = 'dmesg -c > /dev/null && grep -q mem /sys/power/state'
        s3_bg_program_setup_cmd = 'cd /tmp/; nohup ping localhost >/dev/null &'
        s3_bg_program_chk_cmd = 'pgrep ping'
        s3_bg_program_kill_cmd = 'pkill ping'
        s3_log_chk_cmd = 'dmesg |grep -E "ACPI: Waking up from system sleep state S3"\|"ACPI: PCI interrupt for device .* disabled"'
        s3_start_cmd = "echo mem > /sys/power/state"
    hibernate:
        check_s4_support_cmd = grep -q disk /sys/power/state
        test_s4_cmd = "cd /tmp; nohup tcpdump -q -i any -t ip host localhost"
        check_s4_cmd = pgrep tcpdump
        set_s4_cmd = echo disk > /sys/power/state
        kill_test_s4_cmd = pkill -9 tcpdump
        services_up_timeout = 30
    guest_s4, check_suspend, balloon_fix_value:
        s4_support_chk_cmd = "dmesg -c > /dev/null && grep -q disk /sys/power/state"
        s4_bg_program_setup_cmd = "cd /tmp/; nohup ping localhost"
        s4_bg_program_chk_cmd = 'pgrep ping'
        s4_bg_program_kill_cmd = 'pkill ping'
        s4_log_chk_cmd = 'dmesg | grep -E "ACPI: Waking up from system sleep state S4"\|"ACPI: PCI interrupt for device .* disabled"'
        s4_start_cmd = 'echo disk > /sys/power/state'
    with_stress:
        stress_test = autotest_control
        test_control_file = stress.control
        # Use a low stress to make sure guest can response during stress
        control_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 256M"
        test_timeout = 1800
        check_cmd = 'pgrep stress'
        stop_cmd = "killall -g stress"
