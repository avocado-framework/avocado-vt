- @Windows:
    # For windows memory limitation please follow below link to see
    # more details:
    #    https://msdn.microsoft.com/en-us/library/aa366778%28v=vs.85%29.aspx
    vfd_size = 2880k
    os_type = windows
    image_size = 30G
    use_libvirt_cdrom_switch = yes
    shutdown_command = shutdown /s /f /t 0
    reboot_command = shutdown /r /f /t 0
    status_test_command = echo %errorlevel%
    shell_prompt = "^\w:\\.*>\s*$"
    username = Administrator
    # Attention: Changing the password in this file is not supported,
    # since files in winutils.iso use it.
    password = 1q2w3eP
    shell_linesep = "\r\n"
    shell_client = nc
    shell_port = 10022
    file_transfer_client = rss
    file_transfer_port = 10023
    redirs += " file_transfer"
    guest_port_remote_shell = 10022
    guest_port_file_transfer = 10023

    # This ISO will be used for all tests except install:
    cdrom_cd1 = isos/windows/winutils.iso

    cpu_chk_cmd = echo %NUMBER_OF_PROCESSORS%
    mem_chk_cmd = wmic MemoryChip get Capacity
    mem_chk_cur_cmd = wmic memphysical

    rtc_base = localtime
    network_query = ipconfig /all
    restart_network = ipconfig /renew
    mac_ip_filter = "Physical Address.*: (\w+-\w+-\w+-\w+-\w+-\w+)\s+.*IPv4 Address\W*: (\d+\.\d+\.\d+\.\d+)"

    #Try to catch windows bsod
    check_guest_bsod = yes

    # these config are used in virt_test_utils.get_readable_cdroms()
    cdrom_get_cdrom_cmd = "echo list volume > check_cdrom &&"
    cdrom_get_cdrom_cmd += " echo exit >> check_cdrom &&"
    cdrom_get_cdrom_cmd += " diskpart /s check_cdrom"
    cdrom_check_cdrom_pattern = "\d\s+(\w).*CD-ROM"
    cdrom_test_cmd = "dir %s:\"
    cdrom_info_cmd = "wmic cdrom list full"
    unattended_install.cdrom, whql.support_vm_install, svirt_install, live_snapshot.with_installation:
        timeout = 7200
        finish_program = deps/finish/finish.bat
        # process need to check after post install
        # process_check = $process_name
        cdroms += " winutils"
        cdrom_winutils = isos/windows/winutils.iso
        drive_index_winutils = 2
        kernel =
        initrd =
    timedrift, timerdevice..boot_test:
        # Timedrift compensation on Windows with hpet does not happen
        disable_hpet = yes
        extra_params += " -rtc-td-hack"
        time_command = "echo TIME: %date% %time%"
        time_filter_re = "(?<=TIME: \w\w\w ).{19}(?=\.\d\d)"
        time_format = "%m/%d/%Y %H:%M:%S"
        cmd_get_time = "echo %TIME%"
        # For this to work, the cdrom at d: should contain vlc (d:\vlc\vlc.exe) and a video (d:\ED_1024.avi)
        guest_load_command = 'cmd /c "d:\vlc\vlc -f --loop --no-qt-privacy-ask --no-qt-system-tray d:\ED_1024.avi"'
        # Alternative guest load:
        #guest_load_command = "(dir /s && dir /s && dir /s && dir /s) > nul"
        guest_load_stop_command = "taskkill /F /IM vlc.exe"
        guest_load_instances = 2
        host_load_command = "bzip2 -c --best /dev/urandom > /dev/null"
        # Alternative host load:
        #host_load_command = "dd if=/dev/urandom of=/dev/null"
        host_load_instances = 8
        ntp:
            time_command = "w32tm /stripchart /samples:1 /computer:pool.ntp.org"
            time_filter_re = "\d+/\d+/\d+\s\d+:\d+:\d+ [AP]M"
            time_format = "%m/%d/%Y %H:%M:%S"
        date:
            time_command = "echo TIME: %date% %time%"
            time_filter_re = "(?<=TIME: \w\w\w ).{19}(?=\.\d\d)"
            time_format = "%m/%d/%Y %H:%M:%S"
    time_manage:
        alive_test_cmd = systeminfo
        time_command = "echo TIME: %date% %time%"
        time_filter_re = "(?<=TIME: \w\w\w ).{19}(?=\.\d\d)"
        time_format = "%m/%d/%Y %H:%M:%S"
    hibernate:
        check_s4_support_cmd = powercfg /hibernate on
        test_s4_cmd = start ping -t localhost
        check_s4_cmd = tasklist | find /I "ping.exe"
        set_s4_cmd = rundll32.exe PowrProf.dll, SetSuspendState
        kill_test_s4_cmd = taskkill /IM ping.exe /F
        services_up_timeout = 30
    guest_s3, guest_s3_time_drift, check_suspend, balloon_fix_value:
        s3_support_chk_cmd = 'wevtutil cl system && powercfg /h off & powershell -command " & { powercfg -a | select-string 'The following sleep states are available on this system:' -context 0,1 | findstr /I /C:'S3' } "'
        s3_start_cmd = "rundll32.exe PowrProf.dll,SetSuspendState 0,1,0"
        s3_bg_program_setup_cmd = 'start /B ping -t localhost'
        s3_bg_program_chk_cmd = 'tasklist | findstr /I /C:"ping.exe"'
        s3_bg_program_kill_cmd = 'taskkill /IM ping.exe /F'
        s3_log_chk_cmd = 'wevtutil qe system /f:text | findstr /I /C:"The system has resumed from sleep" /C:"The system is entering sleep"'
    guest_s4, guest_s4_time_drift, check_suspend, balloon_fix_value:
        s4_support_chk_cmd = powercfg /hibernate on
        s4_bg_program_setup_cmd = 'start ping -t localhost'
        s4_bg_program_chk_cmd = 'tasklist | find /I "ping.exe"'
        s4_bg_program_kill_cmd = 'taskkill /IM ping.exe /F'
        s4_start_cmd = 'rundll32.exe PowrProf.dll, SetSuspendState'
        s4_log_chk_cmd = 'wevtutil qe system /f:text | findstr /I /C:"The system has resumed from sleep" /C:"The system is entering sleep"'
    mac_change, device_assignment..pf_mac_change, macvtap_mac_change:
        change_cmd = reg add HKLM\SYSTEM\CurrentControlSet\Control\Class\{4D36E972-E325-11CE-BFC1-08002BE10318}\%04d /v NetworkAddress /d %s  /f
        clean_cmd = reg delete  HKLM\SYSTEM\CurrentControlSet\Control\Class\{4D36E972-E325-11CE-BFC1-08002BE10318}\%04d /v NetworkAddress /f
    virtio_rng:
        shell_client = telnet
        shell_port = 23
    unattended_install, svirt_install:
        dump_path = C:\Windows\Memory.dmp
        analyze_cmd = E:\autoit3.exe E:\dump_control.au3
        sub_type = nmi_bsod_catch
        rename_error_image = yes
    with_stress:
        timeout = 600
        autostress = no
        stress_test = win_heavyload
        install_path = "C:\Program Files (x86)\JAM Software\HeavyLoad"
        config_cmd = 'setx -m path "%PATH%;${install_path};"'
        install_cmd = "start /wait DRIVE:\HeavyLoadSetup.exe /verysilent"
        check_cmd = 'tasklist | findstr /I  "heavyload.exe"'
        start_cmd = "heavyload /CPU /MEMORY /START"
        stop_cmd = "taskkill /T /F /IM heavyload.exe"
        x86_64:
            install_path = "C:\Program Files (x86)\JAM Software\HeavyLoad"
        i386, i686:
            install_path = "C:\Program Files\JAM Software\HeavyLoad"
